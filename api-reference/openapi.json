{
  "openapi": "3.1.0",
  "info": {
    "title": "Bluejay API",
    "description": "Bluejay API",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/api-keys": {
      "post": {
        "summary": "Create Api Key",
        "operationId": "create_api_key_v1_api_keys_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api-keys/{key_id}": {
      "delete": {
        "summary": "Revoke Key",
        "operationId": "revoke_key_v1_api_keys__key_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Id"
            }
          },
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/log-evaluation": {
      "post": {
        "summary": "Upload Audio",
        "operationId": "upload_audio_v1_log_evaluation_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_audio_v1_log_evaluation_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ]
      }
    },
    "/v1/generate-test-scenarios": {
      "post": {
        "summary": "Generate Test Scenarios",
        "description": "Generates test scenarios for a given simulation.\n\nAccepts a SimulationRequest with the following structure:\n{\n    name: string;\n    agent: Agent;\n    scenarios: TestScenarioRequest[];\n    callAllocation: {\n        goalAdherence: { [key: string]: number };\n        systemIntegrity: { [key: string]: number };\n    };\n    selectedProperties: {\n        [category: string]: string[];\n    };\n}",
        "operationId": "generate_test_scenarios_v1_generate_test_scenarios_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queue-simulation": {
      "post": {
        "summary": "Queue Simulation",
        "operationId": "queue_simulation_v1_queue_simulation_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/evaluate-call": {
      "post": {
        "summary": "Evaluate",
        "description": "Submit a call or chat for evaluation.\n\nReturns an eval ID that can be used to track evaluation status.",
        "operationId": "evaluate_v1_evaluate_call_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateCallResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/evaluate": {
      "post": {
        "summary": "Evaluate",
        "description": "Submit a call or chat for evaluation.\n\nReturns an eval ID that can be used to track evaluation status.",
        "operationId": "evaluate_v1_evaluate_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateCallResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrieve-call-logs": {
      "get": {
        "summary": "Retrieve Call Logs",
        "operationId": "retrieve_call_logs_v1_retrieve_call_logs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ]
      }
    },
    "/v1/retrieve-call-logs/{agent_id}": {
      "get": {
        "summary": "Retrieve Call Logs",
        "description": "Retrieve call logs for a specific agent given the agent ID.\nReturns a list of call objects, each with an additional \"evaluations\" field\ncontaining a list of evaluations joined via call_id.",
        "operationId": "retrieve_call_logs_v1_retrieve_call_logs__agent_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveCallLogsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrieve-call-log": {
      "get": {
        "summary": "Retrieve Call Log",
        "operationId": "retrieve_call_log_v1_retrieve_call_log_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ]
      }
    },
    "/v1/retrieve-call-log/{call_id}": {
      "get": {
        "summary": "Retrieve Call Log",
        "description": "Retrieve call logs for a specific agent given the agent ID.\nReturns a list of call objects, each with an additional \"evaluations\" field\ncontaining a list of evaluations joined via call_id.",
        "operationId": "retrieve_call_log_v1_retrieve_call_log__call_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Call Id"
            }
          },
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveCallLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/add-agent": {
      "post": {
        "summary": "Add Agent",
        "description": "Add a new agent to the system.\n\nReturns the agent id and a status code.",
        "operationId": "add_agent_v1_add_agent_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/update-agent": {
      "post": {
        "summary": "Update Agent",
        "description": "Update an existing agent in the system.",
        "operationId": "update_agent_v1_update_agent_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/create-simulation": {
      "post": {
        "summary": "Create Simulation",
        "description": "Create a new simulation with the provided details.\n\nReturns the simulation id and a status code.",
        "operationId": "create_simulation_v1_create_simulation_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generate-digital-humans": {
      "post": {
        "summary": "Generate Digital Humans",
        "description": "Generate digital humans based on the provided simulation details.\n\nReturns a list of generated digital humans.",
        "operationId": "generate_digital_humans_v1_generate_digital_humans_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalHumanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalHumanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queue-simulation-run": {
      "post": {
        "summary": "Queue Simulation Run",
        "description": "Queue a simulation run for processing.",
        "operationId": "queue_simulation_run_v1_queue_simulation_run_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulationRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulationRunResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ping": {
      "get": {
        "summary": "Pong",
        "operationId": "pong_v1_ping_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key required to authenticate requests."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentMode": {
        "type": "string",
        "enum": [
          "VOICE",
          "TEXT"
        ],
        "title": "AgentMode",
        "description": "Enum representing the mode of agent"
      },
      "AgentRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the agent"
          },
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "description": "System prompt for the agent"
          },
          "knowledge_base": {
            "type": "string",
            "title": "Knowledge Base",
            "description": "Knowledge base of the agent"
          },
          "phone_number": {
            "type": "string",
            "title": "Phone Number",
            "description": "Phone number associated with the agent"
          },
          "goals": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Goals",
            "description": "List of goals for the agent"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentType"
              },
              {
                "type": "null"
              }
            ],
            "description": "INBOUND: Agent receives incoming calls from customers\nOUTBOUND: Agent makes outgoing calls to customers",
            "default": "INBOUND"
          },
          "mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentMode"
              },
              {
                "type": "null"
              }
            ],
            "description": "Modality of the agent",
            "default": "VOICE"
          }
        },
        "type": "object",
        "required": [
          "name",
          "system_prompt",
          "knowledge_base",
          "phone_number",
          "goals"
        ],
        "title": "AgentRequest"
      },
      "AgentType": {
        "type": "string",
        "enum": [
          "INBOUND",
          "OUTBOUND"
        ],
        "title": "AgentType",
        "description": "Enum representing the type of agent"
      },
      "AgentUpdateRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent to be updated"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the agent"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "System prompt for the agent"
          },
          "knowledge_base": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Knowledge Base",
            "description": "Knowledge base of the agent"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "Phone number associated with the agent"
          },
          "goals": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goals",
            "description": "List of goals for the agent"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentType"
              },
              {
                "type": "null"
              }
            ],
            "description": "INBOUND: Agent receives incoming calls from customers\nOUTBOUND: Agent makes outgoing calls to customers"
          },
          "mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentMode"
              },
              {
                "type": "null"
              }
            ],
            "description": "Modality of the agent"
          }
        },
        "type": "object",
        "required": [
          "agent_id"
        ],
        "title": "AgentUpdateRequest"
      },
      "AgentUpdateResponse": {
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/AgentUpdateRequest",
            "description": "Updated agent details"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the response",
            "default": "200"
          }
        },
        "type": "object",
        "required": [
          "agent"
        ],
        "title": "AgentUpdateResponse"
      },
      "Body_upload_audio_v1_log_evaluation_post": {
        "properties": {
          "org_id": {
            "type": "string",
            "title": "Org Id"
          },
          "eval_id": {
            "type": "string",
            "title": "Eval Id"
          },
          "eval_name": {
            "type": "string",
            "title": "Eval Name"
          },
          "agent_description": {
            "type": "string",
            "title": "Agent Description"
          },
          "knowledge_base": {
            "type": "string",
            "title": "Knowledge Base"
          },
          "custom_questions": {
            "type": "string",
            "title": "Custom Questions"
          },
          "transcript": {
            "type": "string",
            "title": "Transcript"
          },
          "audio_file": {
            "type": "string",
            "format": "binary",
            "title": "Audio File"
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "eval_id",
          "eval_name",
          "agent_description",
          "knowledge_base",
          "custom_questions",
          "transcript",
          "audio_file"
        ],
        "title": "Body_upload_audio_v1_log_evaluation_post"
      },
      "CallDirection": {
        "type": "string",
        "enum": [
          "INBOUND",
          "OUTBOUND"
        ],
        "title": "CallDirection",
        "description": "Enum representing the direction of a call."
      },
      "CallInterface": {
        "type": "string",
        "enum": [
          "PHONE"
        ],
        "title": "CallInterface",
        "description": "Enum representing the interface used for a call."
      },
      "CallLog": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the call"
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent associated with the call"
          },
          "recording_url": {
            "type": "string",
            "title": "Recording Url",
            "description": "URL to the recording file (supported formats: .mp4, .wav, .m4a)"
          },
          "start_time_utc": {
            "type": "string",
            "title": "Start Time Utc",
            "description": "When the call started, in UTC"
          },
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ParticipantResponse"
            },
            "type": "array",
            "title": "Participants",
            "description": "List of call participants"
          },
          "call_direction": {
            "$ref": "#/components/schemas/CallDirection",
            "description": "Direction of the call from the Agent's perspective (INBOUND or OUTBOUND)",
            "default": "INBOUND"
          },
          "interface": {
            "$ref": "#/components/schemas/CallInterface",
            "description": "Interface used for the call",
            "default": "PHONE"
          },
          "status": {
            "$ref": "#/components/schemas/CallStatus",
            "description": "Current status of the call"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When this request was created (defaults to now in UTC)"
          },
          "transcript_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transcript Url",
            "description": "URL to the transcript file (supported formats: .txt, .json)"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCallResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "List of tool calls made during the call"
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Event"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Events",
            "description": "List of events that occurred during the call"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags associated with the call"
          },
          "duration_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Ms",
            "description": "Duration of the call in milliseconds",
            "default": 0
          },
          "evaluations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Evaluation"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Evaluations",
            "description": "List of evaluations associated with the call"
          }
        },
        "type": "object",
        "required": [
          "id",
          "agent_id",
          "recording_url",
          "start_time_utc",
          "participants",
          "status"
        ],
        "title": "CallLog"
      },
      "CallRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent associated with the call"
          },
          "recording_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recording Url",
            "description": "URL to the recording file (supported formats: .mp4, .wav, .m4a)"
          },
          "start_time_utc": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time Utc",
            "description": "When the call started, in UTC ([python] log: datetime.now(timezone.utc) at call start)"
          },
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ParticipantRequest"
            },
            "type": "array",
            "title": "Participants",
            "description": "List of call participants"
          },
          "call_direction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CallDirection"
              },
              {
                "type": "null"
              }
            ],
            "description": "Direction of the call from the Agent's perspective (INBOUND or OUTBOUND)",
            "default": "INBOUND"
          },
          "interface": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CallInterface"
              },
              {
                "type": "null"
              }
            ],
            "description": "Interface used for the call",
            "default": "PHONE"
          },
          "transcript_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transcript Url",
            "description": "URL to the transcript file (supported formats: .txt, .json)"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCallRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "List of tool calls made during the call"
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EventRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Events",
            "description": "List of events that occurred during the call"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags associated with the call"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "When this request was created (defaults to now in UTC)"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "start_time_utc",
          "participants"
        ],
        "title": "CallRequest",
        "description": "Pydantic model for incoming call evaluation requests"
      },
      "CallStatus": {
        "type": "string",
        "enum": [
          "INITIALIZING",
          "QUEUED",
          "EVALUATING",
          "COMPLETED",
          "INCOMPLETED"
        ],
        "title": "CallStatus",
        "description": "Enum representing the possible states of a call."
      },
      "CreateKeyIn": {
        "properties": {
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "scope"
        ],
        "title": "CreateKeyIn"
      },
      "CustomerPersonaRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the customer persona"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the customer persona"
          },
          "goal": {
            "type": "string",
            "title": "Goal",
            "description": "Goal or objective of the customer persona"
          },
          "num_calls": {
            "type": "integer",
            "title": "Num Calls",
            "description": "Number of calls that matched the customer persona"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "goal",
          "num_calls"
        ],
        "title": "CustomerPersonaRequest",
        "description": "Pydantic model for customer persona in simulation"
      },
      "DigitalHumanRequest": {
        "properties": {
          "simulation_id": {
            "type": "string",
            "title": "Simulation Id",
            "description": "ID of the simulation to be used for the digital human"
          },
          "goal_adherence": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/GoalAdherence"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal Adherence",
            "description": "List of goal adherence scenarios"
          },
          "customer_personas": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CustomerPersonaRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Personas",
            "description": "List of customer personas to be used in the simulation"
          },
          "load_testing": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Load Testing",
            "description": "Number of load testing calls",
            "default": 0
          },
          "red_teaming": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Red Teaming",
            "description": "Number of red teaming calls",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "simulation_id"
        ],
        "title": "DigitalHumanRequest",
        "description": "Pydantic model for digital humans (simulation type) request"
      },
      "DigitalHumanResponse": {
        "properties": {
          "digital_humans": {
            "items": {
              "$ref": "#/components/schemas/TestCase"
            },
            "type": "array",
            "title": "Digital Humans",
            "description": "List of digital humans created for the simulation"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the response",
            "default": "200"
          }
        },
        "type": "object",
        "title": "DigitalHumanResponse"
      },
      "DigitalHumansSettings": {
        "properties": {
          "default_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Name",
            "description": "Default name for the digital human",
            "default": "random"
          },
          "default_caller_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Caller Number",
            "description": "Default caller phone number for the digital human",
            "default": "random"
          },
          "default_language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Language",
            "description": "Default language for the digital human",
            "default": "random"
          },
          "default_background_noise": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Background Noise",
            "description": "Background noise to be used in the simulation",
            "default": "none"
          },
          "speaks_first": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Speaks First",
            "description": "Whether the digital human speaks first in the call",
            "default": false
          },
          "first_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Message",
            "description": "First message to be spoken by the digital human",
            "default": "ai_generated"
          }
        },
        "type": "object",
        "title": "DigitalHumansSettings",
        "description": "Pydantic model for digital humans settings in simulation"
      },
      "EvaluateCallResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "call_id": {
            "type": "string",
            "title": "Call Id"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "status",
          "call_id",
          "message"
        ],
        "title": "EvaluateCallResponse"
      },
      "Evaluation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the evaluation result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When this evaluation result was created (defaults to now in UTC)"
          },
          "hallucination": {
            "type": "boolean",
            "title": "Hallucination",
            "description": "Whether the agent exhibited hallucination during the call"
          },
          "hallucination_reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hallucination Reasoning",
            "description": "Reasoning behind the hallucination, if applicable"
          },
          "redundancy": {
            "type": "boolean",
            "title": "Redundancy",
            "description": "Whether the agent exhibited redundancy during the call"
          },
          "redundancy_reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redundancy Reasoning",
            "description": "Reasoning behind the redundancy, if applicable"
          },
          "agent_speak_percentage": {
            "type": "number",
            "title": "Agent Speak Percentage",
            "description": "Percentage of the call where the agent was speaking"
          },
          "avg_agent_latency": {
            "type": "number",
            "title": "Avg Agent Latency",
            "description": "Average latency of the agent's responses during the call"
          },
          "num_turns": {
            "type": "integer",
            "title": "Num Turns",
            "description": "Total number of turns taken by the agent during the call"
          },
          "call_summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Call Summary",
            "description": "Summary of the call, if applicable"
          },
          "custom_evals": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Evals",
            "description": "List of custom evaluations performed during the call"
          },
          "custom_evals_success_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Evals Success Rate",
            "description": "Success rate of the custom evaluations performed during the call"
          },
          "pronunciation_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pronunciation Score",
            "description": "Pronunciation score of the agent during the call"
          },
          "pronunciation_reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pronunciation Reasoning",
            "description": "Reasoning behind the pronunciation score, if applicable"
          }
        },
        "type": "object",
        "required": [
          "hallucination",
          "redundancy",
          "agent_speak_percentage",
          "avg_agent_latency",
          "num_turns"
        ],
        "title": "Evaluation",
        "description": "Pydantic model for evaluation result"
      },
      "Event": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the event"
          },
          "start_offset_ms": {
            "type": "integer",
            "title": "Start Offset Ms",
            "description": "Start offset of the event in milliseconds"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the event"
          },
          "end_offset_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Offset Ms",
            "description": "End offset of the event in milliseconds"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags associated with the event"
          }
        },
        "type": "object",
        "required": [
          "title",
          "start_offset_ms"
        ],
        "title": "Event",
        "description": "Pydantic model for event data"
      },
      "EventRequest": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "start_offset_ms": {
            "type": "integer",
            "title": "Start Offset Ms"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "end_offset_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Offset Ms"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "title",
          "start_offset_ms"
        ],
        "title": "EventRequest",
        "description": "Pydantic model for event data in request"
      },
      "GoalAdherence": {
        "properties": {
          "goal": {
            "type": "string",
            "title": "Goal",
            "description": "Description of the goal"
          },
          "num_calls": {
            "type": "integer",
            "title": "Num Calls",
            "description": "Number of calls that adhered to the goal"
          }
        },
        "type": "object",
        "required": [
          "goal",
          "num_calls"
        ],
        "title": "GoalAdherence",
        "description": "Pydantic model for goal adherence in simulation"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "KeyOut": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "revoked": {
            "type": "boolean",
            "title": "Revoked"
          }
        },
        "type": "object",
        "required": [
          "id",
          "api_key",
          "scope",
          "name",
          "created_at",
          "revoked"
        ],
        "title": "KeyOut"
      },
      "ParticipantRequest": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ParticipantRole"
          },
          "spoke_first": {
            "type": "boolean",
            "title": "Spoke First"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number"
          }
        },
        "type": "object",
        "required": [
          "role",
          "spoke_first"
        ],
        "title": "ParticipantRequest",
        "description": "Pydantic model for participant data in request"
      },
      "ParticipantResponse": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ParticipantRole",
            "description": "Role of the participant in the call"
          },
          "spoke_first": {
            "type": "boolean",
            "title": "Spoke First",
            "description": "Whether the participant spoke first in the call"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the participant"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "Phone number of the participant (if applicable)"
          }
        },
        "type": "object",
        "required": [
          "role",
          "spoke_first"
        ],
        "title": "ParticipantResponse",
        "description": "Pydantic model for participant data"
      },
      "ParticipantRole": {
        "type": "string",
        "enum": [
          "AGENT",
          "USER"
        ],
        "title": "ParticipantRole",
        "description": "Enum representing the role of a participant in a call."
      },
      "RetrieveCallLogResponse": {
        "properties": {
          "call_log": {
            "$ref": "#/components/schemas/CallLog",
            "description": "Details of the retrieved call log"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the response",
            "default": "200"
          }
        },
        "type": "object",
        "required": [
          "call_log"
        ],
        "title": "RetrieveCallLogResponse"
      },
      "RetrieveCallLogsResponse": {
        "properties": {
          "call_logs": {
            "items": {
              "$ref": "#/components/schemas/CallLog"
            },
            "type": "array",
            "title": "Call Logs",
            "description": "List of calls retrieved from the database"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the response",
            "default": "200"
          }
        },
        "type": "object",
        "title": "RetrieveCallLogsResponse"
      },
      "SimulationRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent to be used in the simulation"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the simulation"
          },
          "sequential_calling": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sequential Calling",
            "description": "Whether to run the simulation with sequential calling",
            "default": false
          },
          "hang_up_on_transfer": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hang Up On Transfer",
            "description": "Whether to hang up the call on transfer",
            "default": false
          },
          "max_call_duration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Call Duration",
            "description": "Maximum duration of each call in minutes (default is 10 minutes)",
            "default": 10
          },
          "digital_humans_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DigitalHumansSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for digital humans in the simulation"
          }
        },
        "type": "object",
        "required": [
          "agent_id"
        ],
        "title": "SimulationRequest",
        "description": "Pydantic model for simulation request"
      },
      "SimulationResponse": {
        "properties": {
          "simulation_id": {
            "type": "integer",
            "title": "Simulation Id",
            "description": "ID of the created simulation"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the response",
            "default": "200"
          }
        },
        "type": "object",
        "required": [
          "simulation_id"
        ],
        "title": "SimulationResponse"
      },
      "SimulationRunRequest": {
        "properties": {
          "simulation_id": {
            "type": "string",
            "title": "Simulation Id",
            "description": "ID of the simulation to be run"
          },
          "digital_human_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Digital Human Ids",
            "description": "Digital human IDs to be used in the simulation"
          }
        },
        "type": "object",
        "required": [
          "simulation_id"
        ],
        "title": "SimulationRunRequest",
        "description": "Pydantic model for simulation run request"
      },
      "SimulationRunResponse": {
        "properties": {
          "simulation_run_id": {
            "type": "string",
            "title": "Simulation Run Id",
            "description": "ID of the created simulation run"
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent associated with the simulation run"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the response",
            "default": "200"
          }
        },
        "type": "object",
        "required": [
          "simulation_run_id",
          "agent_id"
        ],
        "title": "SimulationRunResponse"
      },
      "TestCase": {
        "properties": {},
        "type": "object",
        "title": "TestCase",
        "description": "TestCase class representing tests associated with experiments."
      },
      "ToolCallRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "start_offset_ms": {
            "type": "integer",
            "title": "Start Offset Ms"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters"
          },
          "output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output"
          }
        },
        "type": "object",
        "required": [
          "name",
          "start_offset_ms"
        ],
        "title": "ToolCallRequest",
        "description": "Pydantic model for tool call data in request"
      },
      "ToolCallResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the tool called"
          },
          "start_offset_ms": {
            "type": "integer",
            "title": "Start Offset Ms",
            "description": "Start offset of the tool call in milliseconds"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the tool call"
          },
          "parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "Parameters passed to the tool call"
          },
          "output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output",
            "description": "Output returned by the tool call"
          }
        },
        "type": "object",
        "required": [
          "name",
          "start_offset_ms"
        ],
        "title": "ToolCallResponse",
        "description": "Pydantic model for tool call data"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key required to authenticate requests."
      }
    }
  },
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.getbluejay.ai",
      "description": "Production server"
    }
  ]
}